* What Is This
A mashup of my current knavemacs configuration, snippets from SystemCrafters,
and a lot of copy-paste from LionyxML's emacs-solo configuration.  The goal is
to minimize the number of external packages I pull into emacs while providing a
fully-fledged emacs configuration to taste.

All that should be needed to run this configuration is the following in the
init.el file:

: (require 'org)
: (require 'ob-tangle)
: (org-babel-load-file "~/.config/emacs/minknavemacs.org")

* Prerequsites
- ripgrep
- JetBrainsMono Nerd Font
- run M-x nerd-icons-install-fonts once

* Configuration
** Early Init
Gracefully picked up from https://github.com/LionyxML/emacs-solo

** Emacs General Config
#+BEGIN_SRC elisp
  (use-package emacs
    :ensure nil
    :bind
    (("M-o" . other-window)
     ("M-d" . duplicate-dwim)
     ("M-L" . enlarge-window-horizontally)
     ("M-K" . shrink-window)
     ("M-J" . enlarge-window)
     ("M-H" . shrink-window-horizontally)
     ("M-l" . windmove-right)
     ("M-k" . windmove-up)
     ("M-j" . windmove-down)
     ("M-h" . windmove-left)
     ("M-g r" . recentf)
     ("M-s g" . grep)
     ("C-x ;" . comment-line)
     ("M-s f" . find-name-dired)
     ("C-x C-b" . ibuffer)
     ("RET" . newline-and-indent))
    :custom
    (ad-redefinition-action 'accept)
    (column-number-mode nil)
    (line-number-mode nil)
    (completion-ignore-case t)
    (completions-detailed t)
    (delete-by-moving-to-trash t)
    (display-line-numbers-width 3)
    (display-line-numbers-widen t)
    (delete-selection-mode 1)
    (enable-recursive minibuffers t)
    (find-ls-option '("-exec ls -ldh {} +" . "-ldh"))  ; find-dired results with human readable sizes
    (frame-resize-pixelwise t)
    (global-auto-revert-non-file-buffers t)
    (help-window-select t)
    (history-length 300)
    (inhibit-startup-message t)
    (initial-scratch-message "")
    (ispell-dictionary "en_US")
    (kill-do-not-save-duplicates t)
    (create-lockfiles nil)   ; No backup files
    (make-backup-files nil)  ; No backup files
    (backup-inhibited t)     ; No backup files
    (pixel-scroll-precision-mode t)
    (pixel-scroll-precision-use-momentum nil)
    (ring-bell-function 'ignore)
    (read-answer-short t)
    (recentf-max-saved-items 300) ; default is 20
    (recentf-max-menu-items 15)
    (recentf-auto-cleanup (if (daemonp) 300 'never))
    (recentf-exclude (list "^/\\(?:ssh\\|su\\|sudo\\)?:"))
    (remote-file-name-inhibit-delete-by-moving-to-trash t)
    (remote-file-name-inhibit-auto-save t)
    (resize-mini-windows 'grow-only)
    (ring-bell-function #'ignore)
    (scroll-conservatively 8)
    (scroll-margin 0)
    (savehist-save-minibuffer-history t)    ; t is default
    (savehist-additional-variables
     '(kill-ring                            ; clipboard
       register-alist                       ; macros
       mark-ring global-mark-ring           ; marks
       search-ring regexp-search-ring))     ; searches
    (save-place-file (expand-file-name "saveplace" user-emacs-directory))
    (save-place-limit 600)
    (set-mark-command-repeat-pop t) ; So we can use C-u C-SPC C-SPC C-SPC... instead of C-u C-SPC C-u C-SPC...
    (split-width-threshold 170)     ; So vertical splits are preferred
    (split-height-threshold nil)
    (shr-use-colors nil)
    (switch-to-buffer-obey-display-actions t)
    (tab-always-indent 'complete)
    (tab-width 4)
    (treesit-font-lock-level 4)
    (truncate-lines t)
    (undo-limit (* 13 160000))
    (undo-strong-limit (* 13 240000))
    (undo-outer-limit (* 13 24000000))
    (use-dialog-box nil)
    (use-file-dialog nil)
    (use-package-hook-name-suffix nil)
    (use-short-answers t)
    (visible-bell nil)
    (window-combination-resize t)
    (window-resize-pixelwise nil)
    (xref-search-program 'ripgrep)
    (grep-command "rg -nS --no-heading ")
    (grep-find-ignored-directories
     '("SCCS" "RCS" "CVS" "MCVS" ".src" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "node_modules" "build" "dist"))
    :config
    ;; Font and Theme Configuration
    (load-theme 'modus-vivendi-tinted t)
    (add-to-list 'default-frame-alist
  			   '(font . "JetBrainsMono NF 12"))
    ;; Set line-number-mode with relative numbering
    (defun minknavemacs/no-line-nums-hook ()
  	(display-line-numbers-mode 0))
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode t)
    (dolist (mode '(term-mode-hook
  				  eshell-mode-hook
  				  dired-mode-hook))
  	(add-hook mode 'minknavemacs/no-line-nums-hook))
    ;; Makes everything accept utf-8 as default, so buffers with tsx and so
    ;; won't ask for encoding (because undecided-unix) every single keystroke
    (modify-coding-system-alist 'file "" 'utf-8)
    ;; A Protesilaos life savier HACK
    ;; Add option "d" to whenever using C-x s or C-x C-c, allowing a quick preview
    ;; of the diff (if you choose `d') of what you're asked to save.
    (add-to-list 'save-some-buffers-action-alist
  		       (list "d"
  					 (lambda (buffer) (diff-buffer-with-file (buffer-file-name buffer)))
  					 "show diff between the buffer and its file"))
    ;; On Terminal: changes the vertical separator to a full vertical line
    ;;              and truncation symbol to a right arrow
    (set-display-table-slot standard-display-table 'vertical-border ?\u2502)
    (set-display-table-slot standard-display-table 'truncation ?\u2192)
    ;; Ibuffer filters
    (setq ibuffer-saved-filter-groups
  	    '(("default"
  	       ("org" (or
  				   (mode . org-mode)
  				   (name . "^\\*Org Src")
  				   (name . "^\\*Org Agenda\\*$")))
  	       ("tramp" (name . "^\\*tramp.*"))
  	       ("emacs" (or
  					 (name . "^\\*scratch\\*$")
  					 (name . "^\\*Messages\\*$")
  					 (name . "^\\*Warnings\\*$")
  					 (name . "^\\*Shell Command Output\\*$")
  					 (name . "^\\*Async-native-compile-log\\*$")
  					 (name . "^\\*straight-")))
  	       ("ediff" (or
  					 (name . "^\\*ediff.*")
  					 (name . "^\\*Ediff.*")))
  	       ("dired" (mode . dired-mode))
  	       ("terminal" (or
  						(mode . term-mode)
  						(mode . shell-mode)
  						(mode . eshell-mode)))
  	       ("help" (or
  					(name . "^\\*Help\\*$")
  					(name . "^\\*info\\*$")
  					(name . "^\\*helpful"))))))
    (add-hook 'ibuffer-mode-hook
  			(lambda ()
  		      (ibuffer-switch-to-saved-filter-groups "default")))
    (setq ibuffer-show-empty-filter-groups nil) ; don't show empty groups
    :init
    (set-window-margins (selected-window) 2 0)

    (toggle-frame-maximized)
    (select-frame-set-input-focus (selected-frame))
    (global-auto-revert-mode 1)
    (indent-tabs-mode -1)
    (recentf-mode 1)
    (repeat-mode 1)
    (savehist-mode 1)
    (save-place-mode 1)
    (winner-mode)
    (xterm-mouse-mode 1)
    (file-name-shadow-mode 1) ; allows us to type a new path without having to delete the current one

    (with-current-buffer (get-buffer-create "*scratch*")
      (insert (format ";;
  ;; ███████╗███╗   ███╗ █████╗  ██████╗███████╗
  ;; ██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝
  ;; █████╗  ██╔████╔██║███████║██║     ███████╗
  ;; ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║
  ;; ███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║
  ;; ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝
  ;;   Loading time : %s
  ;;   Packages     : %s
  ;;
  "
  					(emacs-init-time)
  					(number-to-string (length package-activated-list)))))

    (message (emacs-init-time)))
#+END_SRC

** Which-Key
#+BEGIN_SRC elisp
  (use-package which-key
    :defer t
    :ensure nil
    :hook
    (after-init-hook . which-key-mode)
    :config
    (setq which-key-separator "  ")
    (setq which-key-prefix-prefix "... ")
    (setq which-key-max-display-columns 3)
    (setq which-key-idle-delay 1.5)
    (setq which-key-idle-secondary-delay 0.25)
    (setq which-key-add-column-padding 1)
    (setq which-key-max-description-length 40))
#+END_SRC

** Simple Rainbow Delimiters
#+BEGIN_SRC elisp
  ;;; EMACS-SOLO-RAINBOW-DELIMITERS
  ;;
  ;;  Colorizes matching delimiters
  ;;
  ;;  FIXME: Make it play nice with treesitter modes
  ;;
  (use-package emacs-solo-rainbow-delimiters
    :ensure nil
    :no-require t
    :defer t
    :init
    (defun emacs-solo/rainbow-delimiters ()
      "Apply simple rainbow coloring to parentheses, brackets, and braces in the current buffer.
  Opening and closing delimiters will have matching colors."
      (interactive)
      (let ((colors '(font-lock-keyword-face
                      font-lock-type-face
                      font-lock-function-name-face
                      font-lock-variable-name-face
                      font-lock-constant-face
                      font-lock-builtin-face
                      font-lock-string-face
                      )))
        (font-lock-add-keywords
         nil
         `((,(rx (or "(" ")" "[" "]" "{" "}"))
            (0 (let* ((char (char-after (match-beginning 0)))
                      (depth (save-excursion
                               ;; Move to the correct position based on opening/closing delimiter
                               (if (member char '(?\) ?\] ?\}))
                                   (progn
                                     (backward-char) ;; Move to the opening delimiter
                                     (car (syntax-ppss)))
                                 (car (syntax-ppss)))))
                      (face (nth (mod depth ,(length colors)) ',colors)))
                 (list 'face face)))))))
      (font-lock-flush)
      (font-lock-ensure))

    (add-hook 'prog-mode-hook #'emacs-solo/rainbow-delimiters))
#+END_SRC

** Viper Configuration
#+BEGIN_SRC elisp
  (use-package viper
    :ensure nil
    :init
    (setq viper-mode t)
    (setq viper-inhibit-startup-message t)
    (setq viper-expert-level 5)
    (setq viper-want-ctl-h-help t)
    (setq viper-ex-style-editing nil)
    (setq viper-no-multiple-ESC nil)
    (setq viper-syntax-preference 'extended)
    (setq viper-vi-style-in-minibuffer nil)
    (require 'viper))

  ;; from emacs-solo repository
  (use-package emacs-solo-viper-extensions
    :ensure nil
    :no-require t
    :defer t
    :after viper
    :init
    (defun viper-operate-inside-delimiters (open close op)
      "Perform OP inside delimiters OPEN and CLOSE (e.g., (), {}, '', or \"\")."
      (save-excursion
        (search-backward (char-to-string open) nil t)
        (forward-char) ;; Move past the opening delimiter
        (let ((start (point)))
          (search-forward (char-to-string close) nil t)
          (backward-char) ;; Move back before the closing delimiter
          (pulse-momentary-highlight-region start (point))
          (funcall op start (point)))))

    ;; FIXME: works for most common cases, misses (  bla bla (bla) |cursor-here| )
    (defun viper-delete-inside-delimiters (open close)
      "Delete text inside delimiters OPEN and CLOSE, saving it to the kill ring."
      (interactive "cEnter opening delimiter: \ncEnter closing delimiter: ")
      (viper-operate-inside-delimiters open close 'kill-region))

    (defun viper-yank-inside-delimiters (open close)
      "Copy text inside delimiters OPEN and CLOSE to the kill ring."
      (interactive "cEnter opening delimiter: \ncEnter closing delimiter: ")
      (viper-operate-inside-delimiters open close 'kill-ring-save))

    (defun viper-delete-line-or-region ()
      "Delete the current line or the selected region in Viper mode.
        The deleted text is saved to the kill ring."
      (interactive)
      (if (use-region-p)
          ;; If a region is active, delete it
          (progn
        	  (pulse-momentary-highlight-region (region-beginning) (region-end))
        	  (run-at-time 0.1 nil 'kill-region (region-beginning) (region-end)))
        ;; Otherwise, delete the current line including its newline character
        (pulse-momentary-highlight-region (line-beginning-position) (line-beginning-position 2))
        (run-at-time 0.1 nil 'kill-region (line-beginning-position) (line-beginning-position 2))))

    (defun viper-yank-line-or-region ()
      "Yank the current line or the selected region and highlight the region."
      (interactive)
      (if (use-region-p)
        	;; If a region is selected, yank it
        	(progn
            (kill-ring-save (region-beginning) (region-end))  ;; Yank the region
            (pulse-momentary-highlight-region (region-beginning) (region-end)))
        ;; Otherwise, yank the current line
        (let ((start (line-beginning-position))
        		(end (line-end-position)))
        	(kill-ring-save start end)  ;; Yank the current line
        	(pulse-momentary-highlight-region start end))))

    (defun viper-delete-inner-word ()
      "Delete the current word under the cursor, handling edge cases."
      (interactive)
      (let ((bounds (bounds-of-thing-at-point 'word)))
        (if bounds
            (kill-region (car bounds) (cdr bounds))
          (message "No word under cursor"))))

    (defun viper-change-inner-word ()
      "Change the current word under the cursor, handling edge cases."
      (interactive)
      (viper-delete-inner-word)
      (viper-insert nil))

    (defun viper-yank-inner-word ()
      "Yank (copy) the current word under the cursor, handling edge cases."
      (interactive)
      (let ((bounds (bounds-of-thing-at-point 'word)))
        (pulse-momentary-highlight-region (car bounds) (cdr bounds))
        (if bounds
            (kill-ring-save (car bounds) (cdr bounds))
          (message "No word under cursor"))))

    (defun viper-delete-inner-compound-word ()
      "Delete the entire compound word under the cursor, including `-` and `_`."
      (interactive)
      (let ((bounds (viper-compound-word-bounds)))
        (if bounds
            (kill-region (car bounds) (cdr bounds))
          (message "No compound word under cursor"))))

    (defun viper-change-inner-compound-word ()
      "Change the entire compound word under the cursor, including `-` and `_`."
      (interactive)
      (viper-delete-inner-compound-word)
      (viper-insert nil))

    (defun viper-yank-inner-compound-word ()
      "Yank the entire compound word under the cursor into the kill ring."
      (interactive)
      (let ((bounds (viper-compound-word-bounds)))
        (pulse-momentary-highlight-region (car bounds) (cdr bounds))
        (if bounds
            (kill-ring-save (car bounds) (cdr bounds))
          (message "No compound word under cursor"))))

    (defun viper-compound-word-bounds ()
      "Get the bounds of a compound word under the cursor.
      A compound word includes letters, numbers, `-`, and `_`."
      (save-excursion
        (let* ((start (progn
                        (skip-chars-backward "a-zA-Z0-9_-")
                        (point)))
               (end (progn
                      (skip-chars-forward "a-zA-Z0-9_-")
                      (point))))
          (when (< start end) (cons start end)))))

    (defun viper-visual-select-line ()
  	"Start visual selection from the beginning of the current line."
  	(interactive)
  	(set-mark (line-beginning-position)))

    (defun minknavemacs/jump-back-to-mark ()
  	"Interactive function that attempts to move the cursor to the previously set mark."
  	(interactive)
  	(setq current-prefix-arg '(4)) ; C-u
  	(call-interactively 'set-mark-command))


    (defun minknavemacs/org-quick-time-stamp-inactive ()
  	"Insert an inactive time stamp of the current time without user prompt"
  	(interactive)
  	(let ((current-prefix-arg '(16)))
  	  (call-interactively 'org-time-stamp-inactive))
  	(insert " "))

    ;; https://www.reddit.com/r/emacs/comments/r7l3ar/how_do_you_scroll_half_a_page/
    (defun minknavemacs/scroll-down-half-page ()
  	"scroll down half a page while keeping the cursor centered" 
  	(interactive)
  	(let ((ln (line-number-at-pos (point)))
  		  (lmax (line-number-at-pos (point-max))))
  	  (cond ((= ln 1) (move-to-window-line nil))
  			((= ln lmax) (recenter (window-end)))
  			(t (progn
  				 (move-to-window-line -1)
  				 (recenter))))))

    (defun minknavemacs/scroll-up-half-page ()
  	"scroll up half a page while keeping the cursor centered"
  	(interactive)
  	(let ((ln (line-number-at-pos (point)))
  		  (lmax (line-number-at-pos (point-max))))
  	  (cond ((= ln 1) nil)
  			((= ln lmax) (move-to-window-line nil))
  			(t (progn
  				 (move-to-window-line 0)
  				 (recenter))))))

    ;; Delete inside delimiters
    (define-key viper-vi-global-user-map (kbd "di(") (lambda () (interactive) (viper-delete-inside-delimiters ?\( ?\))))
    (define-key viper-vi-global-user-map (kbd "dib") (lambda () (interactive) (viper-delete-inside-delimiters ?\( ?\))))
    (define-key viper-vi-global-user-map (kbd "di{") (lambda () (interactive) (viper-delete-inside-delimiters ?{ ?})))
    (define-key viper-vi-global-user-map (kbd "di\"") (lambda () (interactive) (viper-delete-inside-delimiters ?\" ?\")))
    (define-key viper-vi-global-user-map (kbd "di'") (lambda () (interactive) (viper-delete-inside-delimiters ?' ?')))

    ;; Yank inside delimiters
    (define-key viper-vi-global-user-map (kbd "yi(") (lambda () (interactive) (viper-yank-inside-delimiters ?\( ?\))))
    (define-key viper-vi-global-user-map (kbd "yi{") (lambda () (interactive) (viper-yank-inside-delimiters ?{ ?})))
    (define-key viper-vi-global-user-map (kbd "yi\"") (lambda () (interactive) (viper-yank-inside-delimiters ?\" ?\")))
    (define-key viper-vi-global-user-map (kbd "yi'") (lambda () (interactive) (viper-yank-inside-delimiters ?' ?')))

    ;; Delete/Yank current line or region
    (define-key viper-vi-global-user-map (kbd "dd") 'viper-delete-line-or-region)
    (define-key viper-vi-global-user-map (kbd "yy") 'viper-yank-line-or-region)
    
    ;; Delete/Yank current word
    (define-key viper-vi-global-user-map (kbd "diw") 'viper-delete-inner-word)
    (define-key viper-vi-global-user-map (kbd "yiw") 'viper-yank-inner-word)
    (define-key viper-vi-global-user-map (kbd "ciw") 'viper-change-inner-word)
    (define-key viper-vi-global-user-map (kbd "diW") 'viper-delete-inner-compound-word)
    (define-key viper-vi-global-user-map (kbd "yiW") 'viper-yank-inner-compound-word)
    (define-key viper-vi-global-user-map (kbd "ciW") 'viper-change-inner-compound-word)

    ;; visual select commands 
    (define-key viper-vi-global-user-map (kbd "v") 'set-mark-command)
    (define-key viper-vi-global-user-map (kbd "V") 'viper-visual-select-line)

    ;; incorporate Avy package
    (define-key viper-vi-global-user-map (kbd "m") 'avy-goto-char-timer)

    ;; better scrolling commands
    (define-key viper-vi-global-user-map (kbd "J") 'minknavemacs/scroll-down-half-page)   
    (define-key viper-vi-global-user-map (kbd "K") 'minknavemacs/scroll-up-half-page)

    ;; Go, Jump, Shift, extended commands
    (define-key viper-vi-global-user-map (kbd "g g") 'keyboard-quit)   
    (define-key viper-vi-global-user-map (kbd "g v") 'minknavemacs/jump-back-to-mark)
    (define-key viper-vi-global-user-map (kbd "g u") 'universal-argument)

    ;; Z Commands, shift views and manage splits
    (define-key viper-vi-global-user-map (kbd "z t") 'viper-line-to-top)
    (define-key viper-vi-global-user-map (kbd "z z") 'viper-line-to-middle)
    (define-key viper-vi-global-user-map (kbd "z b") 'viper-line-to-bottom)
    (define-key viper-vi-global-user-map (kbd "z x") 'delete-other-windows)
    (define-key viper-vi-global-user-map (kbd "z c") 'delete-window)
    (define-key viper-vi-global-user-map (kbd "z s") 'split-window-below)
    (define-key viper-vi-global-user-map (kbd "z v") 'split-window-right)
    (define-key viper-vi-global-user-map (kbd "z h") 'windmove-left)
    (define-key viper-vi-global-user-map (kbd "z j") 'windmove-down)
    (define-key viper-vi-global-user-map (kbd "z k") 'windmove-up)
    (define-key viper-vi-global-user-map (kbd "z l") 'windmove-right)

    ;; "Quick" Menus start with prefix SPC
    (define-key viper-vi-global-user-map (kbd "SPC SPC") 'switch-to-buffer)
    (define-key viper-vi-global-user-map (kbd "SPC k") 'kill-current-buffer)
    (define-key viper-vi-global-user-map (kbd "SPC b k") 'kill-buffer)
    (define-key viper-vi-global-user-map (kbd "SPC b i") 'ibuffer)

    (define-key viper-vi-global-user-map (kbd "SPC o a") 'org-agenda)
    (define-key viper-vi-global-user-map (kbd "SPC o c") 'org-capture)
    (define-key viper-vi-global-user-map (kbd "SPC o l") 'org-store-link)
    (define-key viper-vi-global-user-map (kbd "SPC o t") 'minknavemacs/org-quick-time-stamp-inactive)

    (define-key viper-vi-global-user-map (kbd "SPC x s") 'save-buffer)
    (define-key viper-vi-global-user-map (kbd "SPC x d") 'dired-jump)
    (define-key viper-vi-global-user-map (kbd "SPC x f") 'find-file)
    (define-key viper-vi-global-user-map (kbd "SPC x c") 'save-buffers-kill-terminal))
#+END_SRC

** Mode Line Configuration
#+BEGIN_SRC elisp
  (use-package minknavemacs-mode-line
    :ensure nil
    :no-require t
    :defer t
    :init
    ;; ------------MODELINE FACES
    (defface minknavemacs/modeline-faces-vipermode
    	'((t :foreground "#cccccc"
    		 ))
    	"Default Face"
    	:group 'minknavemacs/mode-line-faces)

    
    (defface minknavemacs/modeline-faces-readonly
    	'((t :foreground "#cccccc"
    		 ))
    	"Default Face"
    	:group 'minknavemacs/mode-line-faces)

    
    (defface minknavemacs/modeline-faces-modified
    	'((t :foreground "#cccccc"
    		 ))
    	"Default Face"
    	:group 'minknavemacs/mode-line-faces)

    (defface minknavemacs/modeline-faces-kmacrorec
    	'((t :foreground "#cccccc"
    		 ))
    	"Default Face"
    	:group 'minknavemacs/mode-line-faces)
    
    ;; ------------MODELINE MODULES

    ;; modeline module: viper indicator
    (defvar-local minknavemacs/modeline-viper-indicator
    	  '(:eval
    		(when (mode-line-window-selected-p)
    		  (propertize (minknavemacs/return-viper-state) 'face 'minknavemacs/modeline-faces-vipermode)))
    	"Modeline module to show Viper / Emacs state indicator.")

    ;; modeline module: readonly indicator
    (defvar-local minknavemacs/modeline-readonly-indicator
        '(:eval
    		(when buffer-read-only
            (propertize "" 'face 'minknavemacs/modeline-faces-readonly)))
    	"Modeline module to provide a readonly indicator for appropriate buffers")

    ;; modeline module: modified indicator
    (defvar-local minknavemacs/modeline-modified-indicator
        '(:eval
    		(when (buffer-modified-p)
            (propertize "" 'face 'minknavemacs/modeline-faces-modified)))
    	"Modeline module to provide a modified indicator for appropriate buffers")

    ;; modeline module: buffer name
    (defvar-local minknavemacs/modeline-bufname
    	  '(:eval
    		(propertize (buffer-name) 'help-echo (buffer-file-name)))
    	"Modeline module to provide the buffer name.")

    ;; modeline module: major mode icon
    (defvar-local minknavemacs/modeline-major-mode-icon
        '(:eval
  		(when (mode-line-window-selected-p)
            (nerd-icons-icon-for-mode major-mode)))
  	"Modeline module to provide an icon based on the major mode.")

    ;; modeline module: major mode name
    (defvar-local minknavemacs/modeline-major-mode-name
      '(:eval
        (when (mode-line-window-selected-p)
          mode-name))
    "Modeline module to provide major mode name.")

    ;; modeline module: right display
    (defvar-local minknavemacs/modeline-right-display
    	  '(""
    		" L%l:C%c "
    		"[%p]")
    	"Modeline module ot provide minimal modeline info aligned right.")

    ;; modeline module: kmacro record indicator
    (defvar-local minknavemacs/modeline-kmacro-indicator
    	  '(:eval
    		(when defining-kbd-macro
            (propertize " (󰑋 MACRO)" 'face 'minknavemacs/modeline-faces-kmacrorec)))
    	"Modeline module to provide an indicator for when recording kmacros")

    
    ;; ------------MODELINE PREPARE VARIABLES
    (dolist (construct '(minknavemacs/modeline-viper-indicator
  					   minknavemacs/modeline-readonly-indicator
    					   minknavemacs/modeline-modified-indicator
    					   minknavemacs/modeline-bufname
  					   minknavemacs/modeline-major-mode-icon
  					   minknavemacs/modeline-major-mode-name
    					   minknavemacs/modeline-right-display
    					   minknavemacs/modeline-kmacro-indicator))
    	(put construct 'risky-local-variable t)) ;; required for modeline local vars
    

    ;; ------------MODELINE FUNCTIONS
    (defun minknavemacs/modeline-fill-for-alignment ()
    	"Modeline module to provide filler space until right-aligned items are added to modeline."
    	(let ((r-length (length (concat (format-mode-line minknavemacs/modeline-right-display) (format-mode-line minknavemacs/modeline-kmacro-indicator)) )))
        (propertize " "
                    'display `(space :align-to (- right ,r-length)))))
    
    (defun minknavemacs/return-viper-state ()
  	"Returns the current viper state, or a default string if void."
  	(interactive)
  	(if (not (boundp 'viper-mode-string))
  		(setq viper-mode-string "<X> "))
  	(format-mode-line 'viper-mode-string))


    ;; ------------MODELINE CONSTRUCTION
    (setq-default mode-line-format
    				'("%e"
    				  " "
    				  minknavemacs/modeline-viper-indicator
    				  mode-line-front-space
    				  minknavemacs/modeline-readonly-indicator
    				  " "
    				  minknavemacs/modeline-modified-indicator
    				  " "
    				  minknavemacs/modeline-bufname
    				  " "
    				  minknavemacs/modeline-major-mode-icon
    				  " "
    				  minknavemacs/modeline-major-mode-name
    				  (:eval (minknavemacs/modeline-fill-for-alignment))
    				  minknavemacs/modeline-right-display
    				  minknavemacs/modeline-kmacro-indicator))
    )
#+END_SRC

** Org Mode Configuration
#+BEGIN_SRC elisp
  (use-package org
    :config
    (setf (cdr (rassoc 'find-file-other-window org-link-frame-setup)) 'find-file) ; open links in same buffer
    (setq org-agenda-files (list "~/Documents/org" "~/Documents/org/workstreams"))
    (setq org-agenda-todo-list-sublevels nil) ;; only want to see top level TODOs in global list
    (setq org-stuck-projects '("+TODO=\"ACTION\"" ("NEXT")))
    (setq org-refile-targets '((org-agenda-files :level . 1)))
    (setq org-todo-keywords
          '((sequence "BACKLOG(b)" "TODO(t)" "ACTION(a)" "NEXT(x)" "WAITING(w@)" "|" "DONE(d!)" "CANCELLED(c)")
            (sequence "NOTICE(n)" "|" "RESOLVED(r@)")
            ))
    (setq org-todo-keywoard-faces
          '(("TODO" . "green")
            ("BACKLOG" . "red")
            ("ACTION" . "purple")
            ("NEXT" . "green")
            ("WAITING" . "yellow")
            ("DONE" . "blue")
            ("CANCELLED" . "blue")
            ("NOTICE" . org-warning)
            ("RESOLVED" . "green")
            ))

    ;; custom agenda views
    (setq org-agenda-custom-commands
          '(
            ("d" "Todo Dashboard"
             (
              (agenda "" ((org-deadline-warning-days 7)))
              (todo "NOTICE" ((org-agenda-overriding-header "Today's Notices")))
              (tags "-@step+TODO=\"TODO\"-SCHEDULED={.+}|+@step+TODO=\"NEXT\""
                         ((org-agenda-overriding-header "Today's Open TODOs")))
              (stuck "" ((org-agenda-overriding-header "Stuck Actions")))
              (todo "ACTION" ((org-agenda-overriding-header "In-Progress Actions")))
              (todo "WAITING" ((org-agenda-overriding-header "Items Being Waited On")))
              ))
            ))

    ;; capture templates
    (setq org-capture-templates
          '(
            ("n" "Post Notice" entry (file+olp "~/Documents/org/notice.org" "Notices")
             "* NOTICE %?\n- %U Notice Created" :empty-lines 1)

            ("t" "New Todo" entry (file+olp "~/Documents/org/inbox.org" "TODOs")
             "* TODO %i%?")

            ("T" "New Scheduled Todo" entry (file+olp "~/Documents/org/tickler.org" "Scheduled TODOs")
             "* TODO %i%?")

            ("m" "Meeting Notes" entry (file+olp "~/Documents/org/inbox.org" "Meeting Notes")
             "* %t %^{Enter Meeting Title}\n** Attendees\n*** \n** Notes\n*** \n** Action Items\n*** TODO " :tree-type week :clock-in t :clock-resume t :empty-lines 0)
            ))
    )
#+END_SRC

** External Packages
I try to limit the inclusion of external packages, but will not shy away from
using them if they provide a bespoke benefit to my configuration or usage of
Emacs in general.

*** Package Configuration
#+BEGIN_SRC elisp
  ;; define package sources and config
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  		     ("org" . "https://orgmode.org/elpa/")
  		     ("elpa" . "https://elpa.gnu.org/packages/")
  		     ))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; use-package setup
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

*** Vertico Completions
#+BEGIN_SRC elisp
  ;; PURPOSE: minimal completion system in the likes of helm and ivy
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("C-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  ;; PURPOSE: built in emacs package that works with vertico, show recent completion selections used
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; PURPOSE: provides extra metadata in margins of vertico completions
  (use-package marginalia
    :ensure t
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  ;; PURPOSE: provides and orderless algorithm for fuzzy finding
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

*** Nerd Icons
I use nerd icons to leverage the full capabilities of the fonts I choose to use
in both the terminal as well as GUI Emacs. Alongside the base package, I use
some other companion packages to add some visual eyecandy to various places.
#+BEGIN_SRC elisp
  ;; PACKAGE: nerd-icons
  ;; PURPOSE: fancy icons in GUI and terminal emacs
  (use-package nerd-icons
    :ensure t
    )

  ;; PACKAGE: nerd-icons-completion
  ;; PURPOSE: fancy icons in completion buffers
  (use-package nerd-icons-completion
    :ensure t
    :after vertico marginalia nerd-icons
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  ;; PACKAGE: nerd-icons-dired
  ;; PURPOSE: fancy icons in dired buffers
  (use-package nerd-icons-dired
    :ensure t
    :init (add-hook 'dired-mode-hook #'nerd-icons-dired-mode))

  ;; PACKAGE: nerd-icons-ibuffer
  ;; PURPOSE: fancy icons in ibuffer
  (use-package nerd-icons-ibuffer
    :ensure t
    :init (add-hook 'ibuffer-mode-hook #'nerd-icons-ibuffer-mode))
#+END_SRC

*** Avy Jump to Point
#+BEGIN_SRC elisp
  ;; Install Avy - jump to location based on char decision tree
  (use-package avy
    :ensure t
    :config
    ;; define an avy action to kill a while line based on a selection
    ;; (see https://karthinks.com/software/avy-can-do-anything/)
    (defun avy-action-kill-whole-line (pt)
      (save-excursion
  	(goto-char pt)
  	(kill-whole-line))
      (select-window
       (cdr
  	(ring-ref avy-ring 0)))
      t)

    ;; add custom avy actions to the action dispatcher
    (setf (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line
  		)
    )
#+END_SRC
